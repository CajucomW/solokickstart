# # -------Phase 1--------
# Apply templates to all files it finds in the content directory, generating parallel output files in the docs/ directory.

# import glob

# all_html_files = glob.glob("content/*.html")
# output = glob.glob('docs/*.html')
# template_html = open('templates/base.html').read()

# import os

# pages = []

# for html_path in all_html_files:
#     file_name = os.path.basename(html_path)
#     print(file_name)
#     name_only, extension = os.path.splitext(file_name)

#     pages.append({
#     "filename": html_path, 
#     "title": name_only,
#     "output": "docs/" + file_name,
# })

# for page in pages:
    
#     html_file = open(page['filename']).read()
#     combined = template_html.replace('{{content}}', html_file)
#     combined = combined.replace('{{title}}', page['title'])
#     open(page['output'], 'w+').write(combined)
#
# 
#  -------Phase 2--------
# Use jinja2 to do the string replacements (“templating”) on your site.
# from jinja2 import Template

# import glob
# import os

# all_html_files = glob.glob("content/*.html")
# link = glob.glob('docs/*.html')
# template_html = open('templates/base.html').read()

# for html_path in all_html_files:
#     file_name = os.path.basename(html_path)
#     name_only, extension = os.path.splitext(file_name)
#     html_content = open(html_path).read()
#     template = Template(template_html)
#     result = template.render(
#         title=name_only,
#         content=html_content,
#         )
#     open("docs/" + file_name, 'w+').write(result)
        
# #  -------Phase 3--------
# Utilize the power of Jinja to autogenerate a list of links in your navigation section of your site.
# Challenge 3 of Jinja Control Flow looks to have the answer to active links being selected.

# template = Template(template_html)
# results = template.render(
#     output=link,
#     title=name_only,)
# print('is this working?',)